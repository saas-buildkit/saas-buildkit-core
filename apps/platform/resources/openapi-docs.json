{
  "openapi": "3.0.0",
  "paths": {
    "/api/platform/v1/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "409": {
            "description": "Appears when user with such email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "default": 409
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/auth/approve-signup": {
      "post": {
        "operationId": "AuthController_approveSignup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveSignUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/auth/signin": {
      "post": {
        "operationId": "AuthController_signIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/auth/sso/saml/login": {
      "get": {
        "operationId": "AuthController_samlLogin",
        "parameters": [
          {
            "name": "redirectUrl",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/auth/sso/saml/ac": {
      "post": {
        "operationId": "AuthController_samlAcknowledge",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/auth/saml/sso/metadata": {
      "get": {
        "operationId": "SamlController_samlMetadata",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/platform/v1/roles": {
      "get": {
        "operationId": "RolesController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 50\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.id",
            "required": false,
            "in": "query",
            "description": "Filter by id query param.\n          <p>\n             <b>Format: </b> filter.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.id=$not:$like:John Doe&filter.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$in</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$contains</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC,id:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>id</li>\n<li>name</li>\n<li>createdAt</li>\n<li>updatedAt</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> name,roleType\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>name</li>\n<li>roleType</li></ul>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "List of fields to select.\n      <p>\n             <b>Example: </b> id,name,createdAt,updatedAt,roleType\n          </p>\n      <p>\n             <b>Default Value: </b> By default all fields returns. If you want to select only some fields, provide them in query param\n          </p>\n      ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDocumented"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomUserRoleWithoutPermissionsDto"
                          }
                        },
                        "meta": {
                          "properties": {
                            "select": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "id",
                                  "name",
                                  "createdAt",
                                  "updatedAt",
                                  "roleType"
                                ]
                              }
                            },
                            "filter": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "RolesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserRoleWithoutPermissionsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/platform/v1/roles/{id}": {
      "get": {
        "operationId": "RolesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entity id, uuid v4 format",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserRoleWithoutPermissionsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "RolesController_updateOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entity id, uuid v4 format",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserRoleWithoutPermissionsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "RolesController_softDelete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entity id, uuid v4 format",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "query",
            "description": "Version number of entity",
            "example": "1",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/platform/v1/roles/test-proxy": {
      "get": {
        "operationId": "RolesController_testProxy",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/platform/v1/tenants/configuration/saml": {
      "post": {
        "operationId": "TenantsConfigurationController_setupSaml",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupSamlConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tenants"
        ]
      }
    },
    "/api/platform/health": {
      "get": {
        "operationId": "HealthController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "Platform Application is responsible for the common things, like user, tenants, auth, management.",
    "description": "It has a common api for tenants and auth. By default designed as a multi-tenant, but you can have only one tenant and manage it like this, in case if in future you would like to expand.",
    "version": "1.0.0",
    "contact": {
      "name": "Vitalii Samofal",
      "url": "https://www.softkit.dev/",
      "email": "vitalii.samofal@softkit.dev"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:9999",
      "description": "local server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "link to the docs with more details about the error"
          },
          "title": {
            "type": "string",
            "description": "title of the error, short description"
          },
          "status": {
            "type": "number",
            "description": "http status code of the error, e.g. 404"
          },
          "detail": {
            "type": "string",
            "description": "detail of the error, comprehensive message for the end user (e.g. 'customer with id 12344321 not found')"
          },
          "data": {
            "type": "object",
            "description": "additional data that can be used by the client to handle the error"
          },
          "instance": {
            "type": "string",
            "description": "error instance, unique identifier for this particular occurrence of the problem"
          }
        },
        "required": [
          "type",
          "title",
          "status",
          "detail",
          "instance"
        ]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "Original password"
          },
          "repeatedPassword": {
            "type": "string",
            "description": "Repeat password"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password",
          "repeatedPassword",
          "firstName",
          "lastName",
          "companyName"
        ]
      },
      "ApproveSignUpRequest": {
        "type": "object",
        "properties": {
          "approvalId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "approvalId",
          "code"
        ]
      },
      "SignInRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "absD123k&"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "PaginatedMetaDocumented": {
        "type": "object",
        "properties": {
          "itemsPerPage": {
            "type": "number",
            "title": "Number of items per page"
          },
          "totalItems": {
            "type": "number",
            "title": "Total number of items"
          },
          "currentPage": {
            "type": "number",
            "title": "Current requested page"
          },
          "totalPages": {
            "type": "number",
            "title": "Total number of pages"
          },
          "sortBy": {
            "type": "array",
            "title": "Sorting by columns",
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                ]
              }
            }
          },
          "searchBy": {
            "title": "Search by fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "search": {
            "type": "string",
            "title": "Search term"
          },
          "select": {
            "title": "List of selected fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "type": "object",
            "title": "Filters that applied to the query"
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "currentPage",
          "totalPages"
        ]
      },
      "PaginatedLinksDocumented": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "title": "Link to first page"
          },
          "previous": {
            "type": "string",
            "title": "Link to previous page"
          },
          "current": {
            "type": "string",
            "title": "Link to current page"
          },
          "next": {
            "type": "string",
            "title": "Link to next page"
          },
          "last": {
            "type": "string",
            "title": "Link to last page"
          }
        }
      },
      "PaginatedDocumented": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Array of entities",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "meta": {
            "title": "Pagination Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedMetaDocumented"
              }
            ]
          },
          "links": {
            "title": "Links to pages",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedLinksDocumented"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta",
          "links"
        ]
      },
      "PermissionCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "Unique identifier"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at date time in ISO format"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last time updated at date time in ISO format"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at date time in ISO format"
          },
          "version": {
            "type": "string",
            "description": "Entity version for optimistic lock handling"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "version",
          "name",
          "description",
          "permissions"
        ]
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "Unique identifier"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at date time in ISO format"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last time updated at date time in ISO format"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at date time in ISO format"
          },
          "version": {
            "type": "string",
            "description": "Entity version for optimistic lock handling"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "description": "action is the identifier of the permission\nusually it is the name of the permission in lowercase\ne.g. admin.user.create, admin.user.read, admin.user.update, admin.user.delete\nideally it should be short, up to 16-32 characters\nbecause default implementation of auth service keep the permissions in a jwt token\nand jwt token has a limit of 8kb (8192 characters) in size"
          },
          "permissionCategoryId": {
            "type": "string"
          },
          "permissionCategory": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionCategory"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "version",
          "name",
          "description",
          "action",
          "permissionCategoryId"
        ]
      },
      "CustomUserRoleWithoutPermissionsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "Unique identifier"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at date time in ISO format"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last time updated at date time in ISO format"
          },
          "version": {
            "type": "string",
            "description": "Entity version for optimistic lock handling"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "roleType": {
            "enum": [
              "ADMIN",
              "REGULAR_USER"
            ],
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "version",
          "name",
          "description"
        ]
      },
      "CreateUserRole": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "roleType": {
            "type": "string",
            "enum": [
              "ADMIN",
              "REGULAR_USER"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateUserRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "Unique identifier"
          },
          "version": {
            "type": "string",
            "description": "Entity version for optimistic lock handling"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "roleType": {
            "type": "string",
            "enum": [
              "ADMIN",
              "REGULAR_USER"
            ]
          }
        },
        "required": [
          "id",
          "version",
          "name",
          "description"
        ]
      },
      "IdpMappingDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "role"
        ]
      },
      "SetupSamlConfiguration": {
        "type": "object",
        "properties": {
          "entryPoint": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          },
          "fieldsMapping": {
            "$ref": "#/components/schemas/IdpMappingDto"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "entryPoint",
          "certificate",
          "fieldsMapping",
          "enabled"
        ]
      }
    }
  }
}